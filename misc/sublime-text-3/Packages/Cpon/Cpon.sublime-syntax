%YAML 1.2
---
name: Cpon
file_extensions: [cpon]
scope: source.cpon

variables:
  string_key: '"\S*?"'
  int_key: '\d+'

contexts:
  prototype:
    - include: comments
  main:
    - include: rpcvalue
  rpcvalue:
    - include: metamap
    - include: value

  value:
    - include: object
    - include: constant
    - include: number
    - include: string
    - include: datetime
    - include: array
  comments:
    - match: /\*
      scope: punctuation.definition.comment.begin.cpon
      push:
        - meta_scope: comment.block.cpon
        - meta_include_prototype: false
        - match: \*/
          scope: punctuation.definition.comment.end.cpon
          pop: true
    - match: (//).*$\n?
      scope: comment.line.cpon
      captures:
        1: punctuation.definition.comment.cpon
  constant:
    - match: \b(?:true|false|null)\b
      scope: constant.language.cpon
  number:
    - include: float
    - include: uint
    - include: int
  int:
    - match: (-?0x[0-9A-Fa-f]+)|(-?[0-9]+)
      scope: constant.numeric.int.cpon
  uint:
    - match: (-?0x[0-9A-Fa-f]+u)|(-?[0-9]+u)
      scope: constant.numeric.uint.cpon
  float:
    # handles integer and decimal numbers
    - match: |-
        (?x:         # turn on extended mode
          -?         # an optional minus
          (?:
            0        # a zero
            |        # ...or...
            [1-9]    # a 1-9 character
            \d*      # followed by zero or more digits
          )
          \.     # a period
          (?:
            (?:
              \d+    # followed by one or more digits
            )?
            (?:
              [eE]   # an e character
              [+-]?  # followed by an option +/-
              \d+    # followed by one or more digits
            )?       # make exponent optional
          )?         # make decimal portion optional
        )
      scope: constant.numeric.float.cpon
  string:
    - match: '"'
      scope: punctuation.definition.string.begin.cpon
      push: inside-string
  datetime:
    - match: 'd"\d\d\d\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3])\:[0-5]\d\:[0-5]\d(.\d*)?(Z|([+-]\d\d))?"'
      scope: constant.language.datetime.cpon
  inside-string:
    - meta_scope: string.quoted.double.cpon
    - meta_include_prototype: false
    - match: '"'
      scope: punctuation.definition.string.end.cpon
      pop: true
    - include: string-escape
    - match: $\n?
      scope: invalid.illegal.unclosed-string.cpon
      pop: true
    - match: '{{'
      scope: punctuation.definition.variable.begin.cpon
      push:
        - meta_scope: variable.parameter.cpon
        - match: '}}'
          scope: punctuation.definition.variable.end.cpon
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-variable.cpon
  inside-int-key:
    # - meta_scope: constant.numeric.int.cpon
    - meta_include_prototype: false
    - match: '{{int_key}}'
      pop: true
    - match: '.'
      scope: invalid.illegal.int-key.cpon
      pop: true
  string-escape:
    - match: |-
        (?x:                # turn on extended mode
          \\                # a literal backslash
          (?:               # ...followed by...
            ["\\/bfnrt]     # one of these characters
          )
        )
      scope: constant.character.escape.cpon
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.cpon

  metamap:
    - match: '\<'
      scope: punctuation.section.mapping.begin.cpon
      push:
        - meta_scope: meta.mapping.cpon
        - match: '\>'
          scope: punctuation.section.mapping.end.cpon
          pop: true
        - match: '{{int_key}}|{{string_key}}'
          scope: meta.mapping.key.metamap.cpon
          push:
            - match: '\:'
              scope: punctuation.separator.mapping.key-value.cpon
              set:
                - meta_content_scope: meta.mapping.value.cpon
                - include: rpcvalue
                - match: ',|($\n)'
                  scope: punctuation.separator.mapping.pair.cpon
                  pop: true
                - match: '(?=\>)'
                  pop: true
                - match: '\S'
                  scope: invalid.illegal.unclosed.mapping.pair.cpon
            - match: '\S'
              scope: invalid.illegal.unclosed.mapping.key.cpon
  object:
    - match: '\{'
      scope: punctuation.section.mapping.begin.cpon
      push:
        - meta_scope: meta.mapping.cpon
        - match: '\}'
          scope: punctuation.section.mapping.end.cpon
          pop: true
        - match: '{{string_key}}'
          scope: meta.mapping.key.cpon
          push:
            - match: '\:'
              scope: punctuation.separator.mapping.key-value.cpon
              set:
                - meta_content_scope: meta.mapping.value.cpon
                - include: rpcvalue
                - match: ',|($\n)'
                  scope: punctuation.separator.mapping.pair.cpon
                  pop: true
                - match: '(?=\})'
                  pop: true
                - match: '\S'
                  scope: invalid.illegal.unclosed.mapping.pair.cpon
            - match: '\S'
              scope: invalid.illegal.unclosed.mapping.key.cpon

  # metamap:
  #   # a JSON object
  #   - match: '\<'
  #     scope: punctuation.section.mapping.begin.cpon
  #     push:
  #       - meta_scope: meta.mapping.cpon
  #       - match: '\>'
  #         scope: punctuation.section.mapping.end.cpon
  #         pop: true
  #       - match: '"'
  #         scope: punctuation.definition.string.begin.cpon
  #         push:
  #           - clear_scopes: 1
  #           - meta_scope: meta.mapping.key.metamap.cpon #string.quoted.double.cpon
  #           - meta_include_prototype: false
  #           - include: inside-string
  #       - match: '(?=\d)'
  #         # scope: punctuation.definition.string.begin.cpon
  #         push:
  #           - clear_scopes: 1
  #           - meta_scope: meta.mapping.key.metamap.cpon
  #           - meta_include_prototype: false
  #           - include: inside-int-key
  #       - match: ":"
  #         scope: punctuation.separator.mapping.key-value.cpon
  #         push:
  #           - match: '(,)|(?=\>)'
  #             captures:
  #               1: invalid.illegal.expected-mapping-value.cpon
  #             pop: true
  #           - match: (?=\S)
  #             set:
  #               - clear_scopes: 1
  #               - meta_scope: meta.mapping.value.cpon
  #               - include: rpcvalue
  #               - match: ''
  #                 set:
  #                   - match: '(,)|($\n)|(?=\s*\>)'
  #                     captures:
  #                       1: punctuation.separator.mapping.pair.cpon
  #                       2: punctuation.separator.mapping.pair.cpon
  #                     pop: true
  #                   - match: '\s(?=[^\s,])|[^\s,]'
  #                     scope: invalid.illegal.expected-mapping-separator.cpon
  #                     pop: true
  #       - match: '[^\s\>]'
  #         scope: invalid.illegal.expected-mapping-key.cpon

  # object:
  #   # a JSON object
  #   - match: '\{'
  #     scope: punctuation.section.mapping.begin.cpon
  #     push:
  #       - meta_scope: meta.mapping.cpon
  #       - match: '\}'
  #         scope: punctuation.section.mapping.end.cpon
  #         pop: true
  #       - match: '"'
  #         scope: punctuation.definition.string.begin.cpon
  #         push:
  #           - clear_scopes: 1
  #           - meta_scope: meta.mapping.key.cpon #string.quoted.double.cpon
  #           - meta_include_prototype: false
  #           - include: inside-string
  #       - match: ":"
  #         scope: punctuation.separator.mapping.key-value.cpon
  #         push:
  #           - match: '(,)|(?=\})'
  #             captures:
  #               1: invalid.illegal.expected-mapping-value.cpon
  #             pop: true
  #           - match: (?=\S)
  #             set:
  #               - clear_scopes: 1
  #               - meta_scope: meta.mapping.value.cpon
  #               - include: rpcvalue
  #               - match: ''
  #                 set:
  #                   - match: '(,)|($\n)|(?=\s*\})'
  #                     captures:
  #                       1: punctuation.separator.mapping.pair.cpon
  #                       2: punctuation.separator.mapping.pair.cpon
  #                     pop: true
  #                   - match: '\s(?=[^\s,])|[^\s,]'
  #                     scope: invalid.illegal.expected-mapping-separator.cpon
  #                     pop: true
  #       - match: '[^\s\}]'
  #         scope: invalid.illegal.expected-mapping-key.cpon
  array:
    - match: '\['
      scope: punctuation.section.sequence.begin.cpon
      push:
        - meta_scope: meta.sequence.cpon
        - match: '\]'
          scope: punctuation.section.sequence.end.cpon
          pop: true
        - include: rpcvalue
        - match: ","
          scope: punctuation.separator.sequence.cpon
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-sequence-separator.cpon
